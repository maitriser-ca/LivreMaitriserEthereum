[role="pagenumrestart"]
[[whatis_chapter]]
== Qu&#39;est-ce qu&#39;Ethereum ?

(((&quot;Ethereum (généralement)&quot;,&quot;à propos&quot;, id=&quot;ix_01what-is-asciidoc0&quot;, range=&quot;startofrange&quot;)))Ethereum (((&quot;Ethereum comme ordinateur du monde&quot;)))est souvent décrit comme &quot;l&#39;ordinateur du monde.&quot; Mais qu&#39;est-ce que cela signifie ? Commençons par une description axée sur l&#39;informatique, puis essayons de décrypter cela avec une analyse plus pratique des capacités et des caractéristiques d&#39;Ethereum, tout en le comparant à Bitcoin et à d&#39;autres plateformes d&#39;échange d&#39;informations décentralisées (ou « chaînes de blocs » pour court).

D&#39;un point de vue informatique, Ethereum est une machine à états déterministe mais pratiquement illimitée, composée d&#39;un état singleton globalement accessible et d&#39;une machine virtuelle qui applique des modifications à cet état.

D&#39;un point de vue plus pratique, Ethereum est une infrastructure informatique à source libre décentralisée à l&#39;échelle mondiale qui exécute des programmes appelés _contrats intelligents_. Il utilise une chaîne de blocs pour synchroniser et stocker les changements d&#39;état du système, ainsi qu&#39;une cryptomonnaie appelée _ether_ pour mesurer et limiter les coûts des ressources d&#39;exécution.

La plate-forme Ethereum permet aux développeurs de créer de puissantes applications décentralisées avec des fonctions économiques intégrées. Tout en offrant une disponibilité, une auditabilité, une transparence et une neutralité élevées, il réduit ou élimine également la censure et réduit certains risques de contrepartie.

[[bitcoin_comparison]]
=== Comparé à Bitcoin

(((&quot;Bitcoin&quot;,&quot;Ethereum comparé à&quot;)))(((&quot;Ethereum (généralement)&quot;,&quot;Bitcoin comparé à&quot;)))Beaucoup de gens viendront à Ethereum avec une expérience préalable des cryptomonnaies, en particulier du Bitcoin. Ethereum partage de nombreux éléments communs avec d&#39;autres chaînes de blocs ouvertes : un réseau pair à pair reliant les participants, un algorithme de consensus byzantin tolérant aux pannes pour la synchronisation des mises à jour d&#39;état (une chaîne de blocs de preuve de travail), l&#39;utilisation de primitives cryptographiques telles que le numérique signatures et hachages, et une monnaie numérique (ether).

Pourtant, à bien des égards, le but et la construction d&#39;Ethereum sont étonnamment différents de ceux des chaînes de blocs ouvertes qui l&#39;ont précédé, y compris Bitcoin.

(((&quot;Ethereum (généralement)&quot;, &quot;but de&quot;))) Le but d&#39;Ethereum n&#39;est pas principalement d&#39;être un réseau de paiement en monnaie numérique. (((&quot;monnaie d&#39;utilité, ether en tant que&quot;)))Alors que la monnaie numérique ether fait à la fois partie intégrante et nécessaire au fonctionnement d&#39;Ethereum, l&#39;ether est conçu comme une _monnaie d&#39;utilité_ pour payer l&#39;utilisation de la plate-forme Ethereum en tant qu&#39;ordinateur mondial.

Contrairement à Bitcoin, qui a un langage de script très limité, Ethereum est conçu pour être une chaîne de blocs programmable à usage général qui exécute une _machine virtuelle_ capable d&#39;exécuter du code d&#39;une complexité arbitraire et illimitée. Là où le langage de script de Bitcoin est, intentionnellement, contraint à une simple évaluation vrai/faux des conditions de dépenses, le langage d&#39;Ethereum est _Turing complet_, ce qui signifie qu&#39;Ethereum peut fonctionner directement comme un ordinateur à usage général.

[[blockchain_components]]
=== Composantes d&#39;une chaîne de blocs

(((&quot;chaîne de blocs&quot;,&quot;composantes de&quot;)))(((&quot;Ethereum (généralement)&quot;,&quot;composantes de chaîne de blocs&quot;)))Les composantes d&#39;une chaîne de blocs ouverte et publique sont (généralement) :

* Un réseau pair à pair (P2P) connectant les participants et propageant les transactions et les blocs de transactions vérifiées, basé sur un &quot;échange&quot; pass:[<span class="keep-together">protocolaire</span>] standardisé.
* Messages, sous forme de transactions, représentant des transitions d&#39;état
* Un ensemble de règles consensuelles, régissant ce qui constitue une transaction et ce qui constitue une transition d&#39;état valide
* Une machine à états qui traite les transactions selon les règles du consensus
* Une chaîne de blocs cryptographiquement sécurisés qui agit comme un journal de toutes les transitions d&#39;état vérifiées et acceptées
* Un algorithme de consensus qui décentralise le contrôle sur la chaîne de blocs, en forçant les participants à coopérer à l&#39;application des règles de consensus
* Un schéma d&#39;incitation théoriquement valable (par exemple, les coûts de la preuve de travail plus les récompenses globales) pour sécuriser économiquement la machine d&#39;état dans un pass:[<span class="keep-together">environnement</span>] ouvert.
* Une ou plusieurs implémentations logicielles à source libre des éléments ci-dessus (&quot;clients&quot;)

Tous ou la plupart de ces composants sont généralement combinés dans un seul client logiciel. Par exemple, dans (((&quot;Bitcoin Core&quot;)))(((&quot;bitcoind client&quot;)))Bitcoin, l&#39;implémentation de référence est développée par le projet à source libre _Bitcoin Core_ et implémentée en tant que client _bitcoind_. Dans Ethereum, plutôt qu&#39;une implémentation de référence, il existe une (((&quot;spécification de référence&quot;)))_spécification de référence_, une description mathématique du système dans le livre jaune (voir <<references>>). Il existe un certain nombre de clients, qui sont construits selon la spécification de référence.

Dans le passé, nous utilisions le terme &quot;chaîne de blocs&quot; pour représenter tous les composants que nous venons d&#39;énumérer, comme une référence abrégée à la combinaison de technologies qui englobent toutes les caractéristiques décrites. Aujourd&#39;hui, cependant, il existe une grande variété de chaînes de blocs avec des propriétés différentes. Nous avons besoin de qualificatifs pour nous aider à comprendre les caractéristiques de la chaîne de blocs en question, telles que _ouverte, publique, globale, décentralisée, neutre,_ et _résistante à la censure_, pour identifier les caractéristiques émergentes importantes d&#39;un système &quot;chaîne de blocs&quot; que ces composants permettent.

Toutes les chaînes de blocs ne sont pas créées égales. Quand quelqu&#39;un vous dit que quelque chose est une chaîne de blocs, vous n&#39;avez pas reçu de réponse ; vous devez plutôt commencer à poser beaucoup de questions pour clarifier ce qu&#39;elles veulent dire lorsqu&#39;elles utilisent le mot &quot;chaîne de blocs&quot;. Commencez par demander une description des composants de la liste précédente, puis demandez si cette &quot;chaîne de blocs&quot; présente les caractéristiques d&#39;être _ouverte, publique_, etc.

[[ethereum_birth]]
=== La naissance d&#39;Ethereum

(((&quot;Ethereum (généralement)&quot;, &quot;naissance de&quot;))) Toutes les grandes innovations résolvent de vrais problèmes, et Ethereum ne fait pas exception. Ethereum a été conçu à une époque où les gens reconnaissaient la puissance du modèle Bitcoin et essayaient d&#39;aller au-delà des applications de cryptomonnaie. Mais les développeurs étaient confrontés à une énigme : ils devaient soit construire sur Bitcoin, soit démarrer une nouvelle chaîne de blocs. (((&quot;Bitcoin&quot;,&quot;limitations of&quot;)))S&#39;appuyer sur Bitcoin signifiait vivre dans les limites intentionnelles du réseau et essayer de trouver des solutions de contournement. L&#39;ensemble limité de types de transactions, de types de données et de tailles de stockage de données semblait limiter les types d&#39;applications pouvant s&#39;exécuter directement sur Bitcoin ; tout le reste nécessitait des couches hors chaîne supplémentaires, ce qui annulait immédiatement bon nombre des avantages de l&#39;utilisation d&#39;une chaîne de blocs publique. Pour les projets qui avaient besoin de plus de liberté et de flexibilité tout en restant pertinent, une nouvelle chaîne de blocs était la seule option. Mais cela signifiait beaucoup de travail : démarrage de tous les éléments de l&#39;infrastructure, tests exhaustifs, etc.

(((&quot;Buterin, Vitalik&quot;, &quot;et la naissance d&#39;Ethereum&quot;))) Vers la fin de 2013, Vitalik Buterin, un jeune programmeur et passionné de Bitcoin, a commencé à réfléchir à l&#39;extension des capacités de Bitcoin et Mastercoin (un protocole Bitcoin de superposition étendu pour offrir des contrats intelligents rudimentaires). En octobre de la même année, Vitalik a proposé une approche plus généralisée à l&#39;équipe Mastercoin, qui permettait à des contrats flexibles et scriptables (mais pas Turing-complets) de remplacer le langage contractuel spécialisé de Mastercoin. Bien que l&#39;équipe Mastercoin ait été impressionnée, cette proposition était un changement trop radical pour s&#39;intégrer dans leur feuille de route de développement.

En décembre 2013, Vitalik a commencé à partager un livre blanc qui décrivait l&#39;idée derrière Ethereum : une chaîne de blocs à usage général complète de Turing. Quelques dizaines de personnes ont vu cette première ébauche et ont fait part de leurs commentaires, aidant Vitalik à faire évoluer la proposition.

Les deux auteurs de ce livre ont reçu une première ébauche du livre blanc et l&#39;ont commentée. Andreas M. Antonopoulos a été intrigué par l&#39;idée et a posé de nombreuses questions à Vitalik sur l&#39;utilisation d&#39;une chaîne de blocs distincte pour appliquer des règles de consensus sur l&#39;exécution de contrats intelligents et les implications d&#39;un langage Turing-complet. Andreas a continué à suivre les progrès d&#39;Ethereum avec beaucoup d&#39;intérêt, mais en était aux premiers stades de l&#39;écriture de son livre _Mastering Bitcoin_, et n&#39;a participé directement à Ethereum que bien plus tard. (((&quot;Wood, Dr. Gavin&quot;, &quot;et la naissance d&#39;Ethereum&quot;)))Dr. Gavin Wood, cependant, a été l&#39;une des premières personnes à contacter Vitalik et à lui proposer de l&#39;aider avec ses compétences en programmation C++. Gavin est devenu le cofondateur, le codesigner et le CTO d&#39;Ethereum.

Comme le raconte Vitalik dans son http://bit.ly/2T2t6zs[article &quot;Ethereum Prehistory&quot;] :

____
C&#39;était l&#39;époque où le protocole Ethereum était entièrement ma propre création. À partir de là, cependant, de nouveaux participants ont commencé à rejoindre le giron. De loin, le plus important du côté du protocole était Gavin Wood...

Gavin peut également être largement crédité du changement subtil de vision d&#39;Ethereum comme une plate-forme pour créer de l&#39;argent programmable, avec des contrats basés sur la chaîne de blocs qui peuvent contenir des actifs numériques et les transférer selon des règles prédéfinies, à une plate-forme informatique à usage général. Cela a commencé par de subtils changements d&#39;accent et de terminologie, et plus tard cette influence s&#39;est renforcée avec l&#39;accent croissant mis sur l&#39;ensemble &quot;Web 3&quot;, qui considérait Ethereum comme un élément d&#39;une suite de technologies décentralisées, les deux autres étant Whisper et Swarm.
____

À partir de décembre 2013, Vitalik et Gavin ont affiné et fait évoluer l&#39;idée, construisant ensemble la couche de protocole qui est devenue Ethereum.

Les fondateurs d&#39;Ethereum pensaient à une chaîne de blocs sans but précis, qui pourrait prendre en charge une grande variété d&#39;applications en étant _programmée_. L&#39;idée était qu&#39;en utilisant une chaîne de blocs à usage général comme Ethereum, un développeur pouvait programmer son application particulière sans avoir à mettre en œuvre les mécanismes sous-jacents des réseaux pair à pair, des chaînes de blocs, des algorithmes de consensus, etc. La plateforme Ethereum a été conçue pour abstraire ces détails en fournissant un environnement de programmation déterministe et sécurisé pour les applications chaîne de blocs décentralisées.

Tout comme Satoshi, Vitalik et Gavin n&#39;ont pas simplement inventé une nouvelle technologie ; ils ont combiné de nouvelles inventions avec des technologies existantes d&#39;une manière nouvelle et ont livré le code prototype pour prouver leurs idées au monde.

Les fondateurs ont travaillé pendant des années, construisant et affinant la vision. Et le 30 juillet 2015, le premier bloc Ethereum a été miné. L&#39;ordinateur du monde a commencé à servir le monde.

[NOTE]
====
L&#39;article de Vitalik Buterin &quot;A Prehistory of Ethereum&quot; a été publié en septembre 2017 et offre une vue fascinante à la première personne des premiers instants d&#39;Ethereum.

Vous pouvez le lire sur
https://vitalik.ca/general/2017/09/14/prehistory.html[].
====

[[development_stages]]
=== Les quatre étapes de développement d&#39;Ethereum

(((&quot;Ethereum (généralement)&quot;, &quot;quatre étapes de développement&quot;)))Le développement d&#39;Ethereum a été planifié en quatre étapes distinctes, avec des changements majeurs à chaque étape. (((&quot;embranchements divergents&quot;, seealso=&quot;DAO; d&#39;autres embranchements divergents spécifiques, par exemple: Spurious Dragon&quot;))) Une étape peut inclure des sous-versions, appelées &quot;embranchements divergents&quot; (hard forks), qui modifient les fonctionnalités d&#39;une manière qui n&#39;est pas rétrocompatible .

Les quatre principales étapes de développement portent le nom de code _Frontier_, _Homestead_, _Metropolis_ et _Serenity_. Les embranchements divergents intermédiaires qui se sont produits (ou sont prévus) à ce jour portent les noms de code _Ice Age_, _DAO_, _Tangerine Whistle_, _Spurious Dragon_, _Byzantium_ et _Constantinople_. Les étapes de développement et les embranchements divergents intermédiaires sont présentées sur la chronologie suivante, qui est &quot;datée&quot; par numéro de bloc :


Bloc #0:: (((&quot;Frontier&quot;)))__Frontier__—L&#39;étape initiale d&#39;Ethereum, du 30 juillet 2015 à mars 2016.

Bloc #200 000:: (((&quot;Ice Age&quot;)))__Ice Age__—Un embranchement divergent pour introduire une augmentation exponentielle de la difficulté, pour motiver une transition vers PoS lorsque prêt.

Bloc #1 150 000:: (((&quot;Homestead&quot;)))__Homestead__—La deuxième étape d&#39;Ethereum, lancée en mars 2016.

Bloc #1 192 000:: (((&quot;DAO (Decentralized Autonomous Organization)&quot;)))__DAO__—Un embranchement divergent qui a remboursé les victimes du contrat DAO piraté et a provoqué la scission d&#39;Ethereum et d&#39;Ethereum Classic en deux systèmes concurrents.

Bloc #2 463 000:: (((&quot;Tangerine Whistle&quot;)))__Tangerine Whistle__—Un embranchement divergent pour modifier le calcul du gaz pour certaines opérations lourdes en E/S et pour effacer l&#39;état accumulé d&#39;un déni de service (DoS) attaque qui a exploité le faible coût du gaz de ces opérations.

Bloc #2 675 000:: (((&quot;Spurious Dragon&quot;)))__Spurious Dragon__—Un embranchement divergent pour traiter plus de vecteurs d&#39;attaque DoS, et un autre effacement d&#39;état. En outre, un mécanisme de protection contre les attaques par relecture.


Bloc #4 370 000:: (((&quot;Metropolis&quot;)))(((&quot;Byzantium fork&quot;)))__Metropolis Byzantium__—Metropolis est la troisième étape d&#39;Ethereum, en cours au moment de la rédaction de ce livre, lancée en octobre 2017. Byzance est le premier des deux embranchements divergents prévus pour Metropolis.


Après Byzance, il y a un autre embranchement divergent prévu pour Metropolis : (((&quot;Constantinople fork&quot;)))(((&quot;Serenity&quot;)))Constantinople. Metropolis sera suivi de la dernière étape du déploiement d&#39;Ethereum, baptisée Serenity.


[[general_purpose_blockchain]]
=== Ethereum : une chaîne de blocs à usage général

(((&quot;Bitcoin&quot;,&quot;chaîne de blocs Ethereum par rapport à la chaîne de blocs Bitcoin&quot;)))(((&quot;Ethereum (généralement)&quot;,&quot;comme chaîne de blocs à usage général&quot;)))La chaîne de blocs d&#39;origine, à savoir la chaîne de blocs de Bitcoin, suit l&#39;état de unités de bitcoin et leur propriété. (((&quot;machine à états distribuée, Ethereum comme&quot;))) Vous pouvez considérer Bitcoin comme une _machine à états_ à consensus distribué, où les transactions provoquent une _transition d&#39;état_ globale, modifiant la propriété des pièces. Les transitions d&#39;état sont contraintes par les règles du consensus, permettant à tous les participants de (éventuellement) converger vers un état commun (consensus) du système, après que plusieurs blocs aient été minés.

Ethereum est également une machine à états distribuée. Mais au lieu de suivre uniquement l&#39;état de la propriété de la devise, (((&quot;uplet clé-valeur&quot;)))Ethereum suit les transitions d&#39;état d&#39;un magasin de données à usage général, c&#39;est-à-dire un magasin pouvant contenir toutes les données exprimables en tant que _uplet clé–valeur_. Un magasin de données clé-valeur contient des valeurs arbitraires, chacune référencée par une clé ; par exemple, la valeur &quot;Mastering Ethereum&quot; référencée par la clé &quot;Titre du livre&quot;. À certains égards, cela sert le même objectif que le modèle de stockage de données de _Random Access Memory_ (RAM) utilisé par la plupart des ordinateurs à usage général. Ethereum a une mémoire qui stocke à la fois le code et les données, et il utilise la chaîne de blocs Ethereum pour suivre l&#39;évolution de cette mémoire au fil du temps. Comme un ordinateur à programme stocké à usage général, Ethereum peut charger du code dans sa machine d&#39;état et _exécuter_ ce code, en stockant les changements d&#39;état résultants dans sa chaîne de blocs. Deux des différences critiques par rapport à la plupart des ordinateurs à usage général sont que les changements d&#39;état d&#39;Ethereum sont régis par les règles du consensus et que l&#39;état est distribué à l&#39;échelle mondiale. Ethereum répond à la question : &quot;Et si nous pouvions suivre n&#39;importe quel état arbitraire et programmer la machine à états pour créer un ordinateur mondial fonctionnant par consensus ?&quot;

[[ethereum_components]]
=== Composants d&#39;Ethereum

(((&quot;chaîne de blocs&quot;,&quot;composantes de&quot;)))(((&quot;Ethereum (généralement)&quot;,&quot;composantes de chaîne de blocs&quot;)))Dans Ethereum, les composantes d&#39;un système de chaîne de blocs décrit dans <<blockchain_components>> sont, plus précisément :


Réseau P2P:: Ethereum fonctionne sur le _réseau principal Ethereum_, qui est adressable sur le port TCP 30303, et exécute un protocole appelé _ÐΞVp2p_.

Règles de consensus :: Les règles de consensus d&#39;Ethereum sont définies dans la spécification de référence, le Yellow Paper (voir <<references>>).

Transactions:: Les transactions Ethereum sont des messages réseau qui incluent (entre autres) un expéditeur, un destinataire, une valeur et une charge utile de données.

[role="pagebreak-before"]
Machine d&#39;état:: Les transitions d&#39;état Ethereum sont traitées par la _Ethereum Virtual Machine_ (EVM), une machine virtuelle basée sur la pile qui exécute le _bytecode_ (code intermédiaire ou instructions en langage machine). Les programmes EVM, appelés « contrats intelligents », sont écrits dans des langages de haut niveau (par exemple, Solidity) et compilés en code intermédiaire pour être exécutés sur l&#39;EVM.

Structures de données:: L&#39;état d&#39;Ethereum est stocké localement sur chaque nœud en tant que _base de données_ (généralement LevelDB de Google), qui contient les transactions et l&#39;état du système dans une structure de données hachée sérialisée appelée _Arbre Merkle Patricia_.

Algorithme de consensus:: Ethereum utilise le modèle de consensus de Bitcoin, Nakamoto Consensus, qui utilise des blocs séquentiels à signature unique, pondérés en importance par PoW pour déterminer la chaîne la plus longue et donc l&#39;état actuel. Cependant, il est prévu de passer à un système de vote pondéré PoS, nommé _Casper_, dans un proche avenir.

Sécurité économique:: Ethereum utilise actuellement un algorithme PoW appelé _Ethash_, mais cela finira par être abandonné avec le passage au PoS à un moment donné dans le futur.

Clients:: Ethereum a plusieurs implémentations interopérables du logiciel client, dont les plus importantes sont _Go-Ethereum_ (_Geth_) et _Parity_.

[[references]]
==== Lectures complémentaires

Les références suivantes fournissent des informations supplémentaires sur les technologies mentionnées ici :

* Le livre jaune Ethereum:
https://ethereum.github.io/yellowpaper/paper.pdf

* Le Livre Beige, une réécriture du Livre Jaune pour un public plus large dans un langage moins formel:
https://github.com/chronaeon/beigepaper

* Protocole réseau ÐΞVp2p:
http://bit.ly/2quAlTE

* Liste des ressources de la machine virtuelle Ethereum:
http://bit.ly/2PmtjiS

* Base de données LevelDB (utilisée le plus souvent pour stocker la copie locale de la chaîne de blocs):
https://github.com/google/leveldb

* Arbres Merkle Patricia:
https://github.com/ethereum/wiki/wiki/Patricia-Tree

* Algorithme Ethash PoW:
https://github.com/ethereum/wiki/wiki/Ethash

* Guide de mise en œuvre de Casper PoS v1:
http://bit.ly/2DyPr3l

* Client Go-Ethereum (Geth):
https://geth.ethereum.org/

* Client Ethereum Parity:
https://parity.io/

[[turing_completeness]]
=== Complétude d&#39;Ethereum et de Turing

(((&quot;Ethereum (généralement)&quot;,&quot;Turing complétude et&quot;)))(((&quot;Turing complétude&quot;,&quot;Ethereum et&quot;)))Dès que vous commencez à lire sur Ethereum, vous rencontrerez immédiatement le terme &quot;Turing complet&quot;. Ethereum, disent-ils, contrairement à Bitcoin, est Turing complet. Qu&#39;est-ce que cela veut dire exactement?

(((&quot;Turing, Alan&quot;)))Le terme fait référence au mathématicien anglais Alan Turing, qui est considéré comme le père de l&#39;informatique. En 1936, il crée un modèle mathématique d&#39;ordinateur consistant en une machine à états qui manipule des symboles en les lisant et en les écrivant sur une mémoire séquentielle (ressemblant à une bande de papier de longueur infinie). Avec cette construction, Turing a continué à fournir une base mathématique pour répondre (par la négative) aux questions sur la _calculabilité universelle_, c&#39;est-à-dire si tous les problèmes peuvent être résolus. Il a prouvé qu&#39;il existe des classes de problèmes qui ne sont pas calculables. (((&quot;problème d&#39;arrêt&quot;)))Plus précisément, il a prouvé que le _problème d&#39;arrêt_ (s&#39;il est possible, étant donné un programme arbitraire et son entrée, de déterminer si le programme finira par s&#39;arrêter) n&#39;est pas résoluble.

(((&quot;Universal Turing machine (UTM)&quot;)))(((&quot;UTM (Universal Turing machine)&quot;)))Alan Turing a en outre défini un système comme étant _Turing complet_ s&#39;il peut être utilisé pour simuler n&#39;importe quelle machine de Turing. Un tel système s&#39;appelle une _machine de Turing universelle_ (UTM).

La capacité d&#39;Ethereum à exécuter un programme stocké, dans une machine à états appelée Ethereum Virtual Machine, tout en lisant et en écrivant des données dans la mémoire en fait un système Turing complet et donc un UTM. Ethereum peut calculer n&#39;importe quel algorithme pouvant être calculé par n&#39;importe quelle machine de Turing, compte tenu des limites de la mémoire finie.

L&#39;innovation révolutionnaire d&#39;Ethereum consiste à combiner l&#39;architecture informatique à usage général d&#39;un ordinateur à programme stocké avec une chaîne de blocs décentralisée, créant ainsi un ordinateur mondial distribué à un seul état (singleton). Les programmes Ethereum s&#39;exécutent &quot;partout&quot;, mais produisent un état commun qui est sécurisé par les règles de pass:[<span class="keep-together">consensus</span>].

[[turing_completeness_feature]]
==== Complétude de Turing en tant que &quot;fonctionnalité&quot;

(((&quot;Complétude de Turing&quot;, &quot;comme fonctionnalité&quot;))) En entendant qu&#39;Ethereum est Turing complet, vous pourriez arriver à la conclusion qu&#39;il s&#39;agit d&#39;une _fonctionnalité_ qui manque d&#39;une manière ou d&#39;une autre dans un système qui est incomplet de Turing. C&#39;est plutôt le contraire. La complétude de Turing est très facile à réaliser ; en fait, http://bit.ly/2ABft33 [la machine d&#39;état Turing complète la plus simple connue] a 4 états et utilise 6 symboles, avec une définition d&#39;état qui ne compte que 22 instructions. En effet, il arrive parfois que des systèmes soient « accidentellement Turing complets ». Une référence amusante de tels systèmes peut être trouvée à http://bit.ly/2Og1VgX[].

Cependant, l&#39;exhaustivité de Turing est très dangereuse, en particulier dans les systèmes à accès ouvert comme les chaînes de blocs publiques, en raison du problème d&#39;arrêt que nous avons évoqué plus tôt. Par exemple, les imprimantes modernes sont Turing complètes et peuvent recevoir des fichiers à imprimer qui les envoient dans un état figé. Le fait qu&#39;Ethereum soit Turing complet signifie que n&#39;importe quel programme de n&#39;importe quelle complexité peut être calculé par Ethereum. Mais cette flexibilité pose des problèmes épineux de sécurité et de gestion des ressources. Une imprimante qui ne répond pas peut être éteinte et rallumée. Ce n&#39;est pas possible avec une chaîne de blocs publique.

[[turing_completeness_implications]]
==== Implications de la complétude de Turing

(((&quot;complétude de Turing&quot;,&quot;implications de&quot;)))Turing a prouvé que vous ne pouvez pas prédire si un programme se terminera en le simulant sur un ordinateur. En termes simples, nous ne pouvons pas prédire le chemin d&#39;un programme sans l&#39;exécuter. (((&quot;boucles infinies&quot;)))Les systèmes Turing-complets peuvent s&#39;exécuter en &quot;boucles infinies&quot;, un terme utilisé (en simplifiant à l&#39;extrême) pour décrire un programme qui ne se termine pas. Il est trivial de créer un programme qui exécute une boucle qui ne se termine jamais. Mais des boucles sans fin involontaires peuvent survenir sans avertissement, en raison d&#39;interactions complexes entre les conditions de départ et le code. Dans Ethereum, cela pose un défi : chaque nœud participant (client) doit valider chaque transaction, en exécutant tous les contrats intelligents qu&#39;il appelle. Mais comme Turing l&#39;a prouvé, Ethereum ne peut pas prédire si un contrat intelligent prendra fin, ou combien de temps il durera, sans réellement l&#39;exécuter (éventuellement pour toujours). Que ce soit par accident ou exprès, un contrat intelligent peut être créé de telle sorte qu&#39;il s&#39;exécute indéfiniment lorsqu&#39;un nœud tente de le valider. Il s&#39;agit en fait d&#39;une attaque DoS. Et bien sûr, entre un programme qui prend une milliseconde à valider et un autre qui s&#39;exécute indéfiniment, il existe une gamme infinie de programmes désagréables, monopolisant les ressources, gonflant la mémoire et provoquant une surchauffe du processeur qui gaspillent simplement des ressources. Dans un ordinateur mondial, un programme qui abuse des ressources arrive à abuser des ressources mondiales. Comment Ethereum limite-t-il les ressources utilisées par un contrat intelligent s&#39;il ne peut pas prédire l&#39;utilisation des ressources à l&#39;avance ?

(((&quot;EVM (Ethereum Virtual Machine)&quot;,&quot;gaz et&quot;)))(((&quot;gaz&quot;,&quot;comme contraire à l&#39;exhaustivité de Turing&quot;)))Pour répondre à ce défi, Ethereum introduit un mécanisme de mesure appelé _gaz_. Comme l&#39;EVM exécute un contrat intelligent, il comptabilise soigneusement chaque instruction (calcul, accès aux données, etc.). Chaque instruction a un coût prédéterminé en unités de gaz. Lorsqu&#39;une transaction déclenche l&#39;exécution d&#39;un contrat intelligent, elle doit inclure une quantité de gaz qui fixe la limite supérieure de ce qui peut être consommé en exécutant le contrat intelligent. L&#39;EVM terminera l&#39;exécution si la quantité de gaz consommée par le calcul dépasse le gaz disponible dans la transaction. Le gaz est le mécanisme utilisé par Ethereum pour permettre un calcul complet de Turing tout en limitant les ressources que tout programme peut consommer.

La question suivante est, &quot;comment obtenir du gaz pour payer le calcul sur l&#39;ordinateur mondial Ethereum?&quot; Vous ne trouverez pas de gaz sur les échanges. (((&quot;ether (généralement)&quot;, &quot;gaz et&quot;))) Il ne peut être acheté que dans le cadre d&#39;une transaction et ne peut être acheté qu&#39;avec de l&#39;ether. L&#39;ether doit être envoyé avec une transaction et il doit être explicitement affecté à l&#39;achat de gaz, avec un prix du gaz acceptable. Comme à la pompe, le prix de l&#39;essence n&#39;est pas fixe. Le gaz est acheté pour la transaction, le calcul est exécuté et tout gaz non utilisé est remboursé à l&#39;expéditeur de la transaction.

[[DApp]]
=== Des chaînes de blocs à usage général aux applications décentralisées (DApps)

(((&quot;DApps (applications décentralisées)&quot;,&quot;Ethereum comme plate-forme pour&quot;)))(((&quot;Ethereum (généralement)&quot;,&quot;DApps et&quot;)))Ethereum a commencé comme un moyen de créer une chaîne de blocs à usage général qui peut être programmé pour une variété d&#39;utilisations. Mais très rapidement, la vision d&#39;Ethereum s&#39;est élargie pour devenir une plateforme de programmation de DApps. Les DApps représentent une perspective plus large que les contrats intelligents. Un DApp est, à tout le moins, un contrat intelligent et une interface utilisateur Web. Plus généralement, une DApp est une application Web qui repose sur des services d&#39;infrastructure ouverts, décentralisés et pair à pair.

Une DApp est composée d&#39;au moins :

- Contrats intelligents sur une chaîne de blocs
- Une interface utilisateur Web frontale

De plus, de nombreux DApps incluent d&#39;autres composants décentralisés, tels que :

- Un protocole et une plateforme de stockage décentralisé (P2P)
- Un protocole et une plateforme de messagerie décentralisée (P2P)

[TIP]
====
Vous pouvez voir des DApps orthographiés comme _ÐApps_. Le caractère Ð est le caractère latin appelé &quot;ETH&quot;, faisant allusion à Ethereum. Pour afficher ce caractère, utilisez le point de code Unicode +0xD0+, ou si nécessaire l&#39;entité caractère HTML +eth+ (ou entité décimale +#208+).
====

[[evolving_WWW]]
=== Le troisième âge d&#39;Internet

(((&quot;DApps (applications décentralisées)&quot;,&quot;web3 et&quot;)))(((&quot;Ethereum (généralement)&quot;,&quot;web3 et&quot;)))(((&quot;web3&quot;)))En 2004, le terme &quot;Web 2.0&quot; a pris de l&#39;importance, décrivant une évolution du Web vers un contenu généré par l&#39;utilisateur, des interfaces réactives et l&#39;interactivité. Web 2.0 n&#39;est pas une spécification technique, mais plutôt un terme décrivant le nouveau centre d&#39;intérêt des pass:[<span class="keep-together">applications</span>] Web.

Le concept de DApps est destiné à faire passer le World Wide Web à sa prochaine étape d&#39;évolution naturelle, en introduisant la décentralisation avec des protocoles pair à pair dans tous les aspects d&#39;une application Web. Le terme utilisé pour décrire cette évolution est _web3_, c&#39;est-à-dire la troisième &quot;version&quot; du web. (((&quot;Wood, Dr. Gavin&quot;, &quot;et web3&quot;))) Proposé pour la première fois par le Dr Gavin Wood, web3 représente une nouvelle vision et une nouvelle orientation pour les applications Web : des applications détenues et gérées de manière centralisée aux applications basées sur des protocoles décentralisés .

Dans les chapitres suivants, nous explorerons la bibliothèque JavaScript Ethereum web3.js, qui relie les applications JavaScript qui s&#39;exécutent dans votre navigateur avec la chaîne de blocs Ethereum. La bibliothèque web3.js comprend également une interface vers un réseau de stockage P2P appelé _Swarm_ et un service de messagerie P2P appelé _Whisper_. Avec ces trois composants inclus dans une bibliothèque JavaScript exécutée dans votre navigateur Web, les développeurs disposent d&#39;une suite complète de développement d&#39;applications qui leur permet de créer des DApps web3.

[[development_culture]]
=== Culture de développement d&#39;Ethereum

(((&quot;culture de développement, Ethereum&quot;)))(((&quot;Ethereum (généralement)&quot;,&quot;culture de développement&quot;))) Jusqu&#39;à présent, nous avons expliqué en quoi les objectifs et la technologie d&#39;Ethereum diffèrent de ceux des autres chaînes de blocs qui l&#39;ont précédé , comme Bitcoin. Ethereum a également une culture de développement très différente.

(((&quot;Bitcoin&quot;,&quot;culture de développement&quot;)))Dans Bitcoin, le développement est guidé par des principes conservateurs : tous les changements sont soigneusement étudiés pour s&#39;assurer qu&#39;aucun des systèmes existants ne soit perturbé. Pour la plupart, les modifications ne sont mises en œuvre que si elles sont rétrocompatibles. Les clients existants sont autorisés à s&#39;inscrire, mais continueront à fonctionner s&#39;ils décident de ne pas effectuer la mise à niveau.

(((&quot;retrocompatibilité, Ethereum contre Bitcoin&quot;)))Dans Ethereum, en comparaison, la culture de développement de la communauté est axée sur l&#39;avenir plutôt que sur le passé. Le mantra (pas tout à fait sérieux) est &quot;avancez vite et cassez des choses&quot;. Si un changement est nécessaire, il est mis en œuvre, même si cela signifie invalider les hypothèses précédentes, rompre la compatibilité ou forcer les clients à se mettre à jour. La culture de développement d&#39;Ethereum se caractérise par une innovation et une évolution rapide et une volonté de déployer des améliorations tournées vers l&#39;avenir, même si cela se fait au détriment d&#39;une certaine rétrocompatibilité.

Cela signifie pour vous, en tant que développeur, que vous devez rester flexible et être prêt à reconstruire votre infrastructure à mesure que certaines des hypothèses sous-jacentes changent. L&#39;un des grands défis auxquels sont confrontés les développeurs d&#39;Ethereum est la contradiction inhérente entre le déploiement de code sur un système immuable et une plate-forme de développement en constante évolution. Vous ne pouvez pas simplement &quot;mettre à niveau&quot; vos contrats intelligents. Vous devez être prêt à en déployer de nouveaux, à migrer les utilisateurs, les applications et les fonds, et à recommencer.

Ironiquement, cela signifie également que l&#39;objectif de construire des systèmes avec plus d&#39;autonomie et moins de contrôle centralisé n&#39;est toujours pas pleinement atteint. L&#39;autonomie et la décentralisation nécessitent un peu plus de stabilité dans la plate-forme que vous n&#39;obtiendrez probablement dans Ethereum dans les prochaines années. Afin de &quot;faire évoluer&quot; la plateforme, vous devez être prêt à supprimer et redémarrer vos contrats intelligents, ce qui signifie que vous devez conserver un certain degré de contrôle sur eux.

Mais, du côté positif, Ethereum avance très vite. Il y a peu d&#39;opportunités pour la &quot;bike-shedding&quot;, une expression qui signifie retarder le développement en se disputant sur des détails mineurs tels que la façon de construire le garage à vélos à l&#39;arrière d&#39;une centrale nucléaire. Si vous commencez à faire du vélo, vous découvrirez peut-être soudainement que pendant que vous étiez distrait, le reste de l&#39;équipe de développement a changé le plan et a abandonné les vélos en faveur de l&#39;aéroglisseur autonome.

A terme, le développement de la plateforme Ethereum ralentira et ses interfaces deviendront fixes. Mais en attendant, l&#39;innovation est le principe moteur. Vous feriez mieux de suivre, car personne ne ralentira pour vous.

[[why_learn]]
=== Pourquoi apprendre Ethereum ?

(((&quot;chaîne de blocs&quot;,&quot;Ethereum comme chaîne de blocs du développeur&quot;)))(((&quot;Ethereum (généralement)&quot;,&quot;raisons d&#39;apprendre&quot;)))Les chaînes de blocs ont une courbe d&#39;apprentissage très abrupte, car elles combinent plusieurs disciplines en un seul domaine: programmation, sécurité de l&#39;information, cryptographie, économie, systèmes distribués, réseaux pair à pair, etc. Ethereum rend cette courbe d&#39;apprentissage beaucoup moins abrupte, vous pouvez donc démarrer rapidement. Mais juste sous la surface d&#39;un environnement d&#39;une simplicité trompeuse se cache bien plus. Au fur et à mesure que vous apprenez et commencez à chercher plus profondément, il y a toujours une autre couche de complexité et d&#39;émerveillement.

Ethereum est une excellente plate-forme pour en savoir plus sur les chaînes de blocs et construit une communauté massive de développeurs, plus rapidement que toute autre plate-forme de chaîne de blocs. Plus que tout autre, Ethereum est une _chaîne de blocs de développeurs_, construite par des développeurs pour des développeurs. Un développeur familiarisé avec les applications JavaScript peut se lancer dans Ethereum et commencer à produire du code fonctionnel très rapidement. Pendant les premières années de la vie d&#39;Ethereum, il était courant de voir des T-shirts annonçant que vous pouvez créer un jeton en seulement cinq lignes de code. Bien sûr, c&#39;est une épée à double tranchant. Il est facile d&#39;écrire du code, mais il est très difficile d&#39;écrire du _bon_ code _sécurisé_.

[[teaching_objectives]]
=== Ce que ce livre vous apprendra

Ce livre plonge dans Ethereum et examine chaque composant. Vous commencerez par une transaction simple, décortiquerez son fonctionnement, établirez un contrat simple, l&#39;améliorerez et suivrez son parcours dans le système Ethereum.

Vous apprendrez non seulement comment utiliser Ethereum - comment cela fonctionne - mais aussi pourquoi il est conçu comme il est. Vous pourrez comprendre comment chacune des pièces fonctionne, comment elles s&#39;emboîtent et pourquoi.(((range=&quot;endofrange&quot;, startref=&quot;ix_01what-is-asciidoc0&quot;)))(((&quot;compte&quot;,&quot; contrat&quot;, see=&quot;contrats intelligents&quot;)))(((&quot;cryptographie asymétrique&quot;, see=&quot;cryptographie à clé publique&quot;)))(((&quot;BIP&quot;, see=&quot;Propositions d&#39;amélioration de Bitcoin&quot;)))((( &quot;burn&quot;, see=&quot;ether burn&quot;)))(((&quot;cryptographie&quot;,&quot;asymétrique&quot;, see=&quot;cryptographie à clé publique&quot;)))(((&quot;applications décentralisées&quot;, see=&quot;DApps&quot;))) (((&quot;Organisation autonome décentralisée&quot;, see=&quot;DAO&quot;)))(((&quot;fonction par défaut&quot;, see=&quot;fonction de secours&quot;)))(((&quot;portefeuilles déterministes (ensemencés)&quot;,&quot;hiérarchique&quot;, see=&quot;portefeuilles déterministes hiérarchiques&quot;)))(((&quot;Attaques DoS&quot;, see=&quot;attaques par déni de service&quot;)))(((&quot;ECDSA&quot;, see=&quot;Algorithme de signature numérique à courbe elliptique&quot;)))((( &quot;ETC&quot;, see=&quot;Ethereum Classic&quot;)))(((&quot;Ethereum (généralement)&quot;,&quot;clients&quot;, see=&quot;clients, Ethereum&quot;)))(((&quot;Propositions d&#39;amélioration d&#39;Ethereum&quot;, see=&quot;EIP entrées&quot;)))(((&quot;Ethereum Name Service&quot;, see=&quot;ENS&quot;)))(((&quot;Ethereum Virtual Machine&quot;, see=&quot;EVM&quot;)))(((&quot;Compte détenu en externe&quot;, see=&quot;EOA&quot;)))(((&quot;frais&quot;, see=&quot;gaz&quot;)))(((&quot;ICOs&quot;, see=&quot;Pièce initiale Offres&quot;)))(((&quot;Mastering Ethereum Token&quot;, see=&quot;METoken&quot;)))(((&quot;MEW&quot;, see=&quot;MyEtherWallet&quot;)))(((&quot;names/naming&quot;, see=&quot;ENS (Service de noms Ethereum)&quot;)))(((&quot;NFT&quot;, see=&quot;jetons non fongibles&quot;)))(((&quot;PoS&quot;, see=&quot;preuve de participation&quot;)))(((&quot;PoW&quot;, see=&quot;preuve de travail&quot;)))(((&quot;PoWHC&quot;, see=&quot;Proof of Weak Hands Coin&quot;)))(((&quot;Commandes d&#39;appel de procédure à distance (RPC)&quot;, see=&quot;API JSON-RPC&quot;)))(((&quot;Commandes RPC (Remote Procedure Call)&quot;, see=&quot;API JSON-RPC&quot;)))(((&quot;Algorithme de hachage sécurisé&quot;, see=&quot;Entrée SHA&quot;)))(((&quot;portefeuilles prédéfinis&quot;, see=&quot;portefeuilles déterministes&quot;)))(((&quot;contrats intelligents&quot;,&quot;Vyper et&quot;, see=&quot;Vyper&quot;)))(((&quot;smartphones&quot;, see=&quot;portefeuilles mobiles (smartphones)&quot;)))(((&quot;stockage&quot;, see=&quot;stockage de données&quot;)))(((&quot;SUICIDE&quot;, see=&quot;opcode SELFDESTRUCT&quot;)))(((&quot;synchronisation&quot;, see=&quot;synchronisation rapide&quot;)))(((&quot;synchronisation&quot;, see=&quot;première synchronisation&quot;)))(((&quot;frais de transaction&quot;, see=&quot;gaz&quot;)))(((&quot;portefeuilles&quot;,&quot;HD&quot;, see=&quot;portefeuilles déterministes hiérarchiques &quot;)))(((&quot;portefeuilles&quot;,&quot;MetaMask&quot;, see=&quot;MetaMask&quot;)))